'''
给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。

示例 1:

输入: 2
输出: [0,1,1]
示例 2:

输入: 5
输出: [0,1,1,2,1,2]
进阶:

给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？
要求算法的空间复杂度为O(n)。
你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。
链接：https://leetcode-cn.com/problems/counting-bits
'''

'''
dp的思想！
对于所有的数字，只有两类：

奇数：二进制表示中，奇数一定比前面那个偶数多一个 1，因为多的就是最低位的 1。
          举例： 
         0 = 0       1 = 1
         2 = 10      3 = 11
偶数：二进制表示中，偶数中 1 的个数一定和除以 2 之后的那个数一样多。
     因为最低位是 0，除以 2 就是右移一位
     也就是把那个 0 抹掉而已，所以 1 的个数是不变的。
           举例：
          2 = 10       4 = 100       8 = 1000
          3 = 11       6 = 110       12 = 1100
另外，0 的 1 个数为 0，于是就可以根据奇偶性开始遍历计算了。
'''
'''
vector<int> countBits(int num) {
        vector<int> result(num+1);
        result[0] = 0;
        for(int i = 1; i <= num; i++)
        {
            if(i % 2 == 1)  //奇数
          // if(i & 1 != 0) //奇数
            {
                result[i] = result[i-1] + 1;
            }
            else
            {
                result[i] = result[i/2];
            }
        }
        
        return result;
    }
'''
'''
最难的还是解题思路，也就是状态转移方程：
res[i]={ res[i/2]+1; i%2=1 }
	   { res[i/2];   i%2=0 }
i % 2 = 1 =====> i & 1 = 1======>即最低位是1，表明是偶数
i % 2 = 0 =====> i & 1 = 0======>即最低位是0，表示是奇数
其实，就是右移一位后的数的结果加上最后一位的0或者1；
时间复杂度O(n),空间复杂度O(n)。
'''

class Solution:
    def countBits(self, num: int):
        # 奇偶性判断 + dp + 位操作
        dp = [0 for i in range(num + 1)]
        for i in range(1, num + 1):
            # i >> 1表示num中i索引前一个数，dp[i]表示当前以当前元素中1的个数
            # i & 1 判断当前数最后一位是 1 还是 0, 是 0 即是偶数
            dp[i] = dp[i >> 1] + (i & 1)
        return dp