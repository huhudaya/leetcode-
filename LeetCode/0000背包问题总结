解题思路:
  很容易发现「重复问题」，因此，我们可以使用「动态规划」来做
  如果题目问具体的解，那么用「回溯搜索」做（「力扣」第 39 题：组合之和)
  如果要求具体的解，需要用得到回溯的时候，测试用例一般不会太大，但是如果只要求个数的话， 用动态规划就可以了，否则用回溯容易超时
常见的背包问题有1、组合问题。2、True、False问题。3、最大最小问题。
以下题目整理来自大神CyC，github地址：
github
我在大神整理的基础上，又做了细分的整理。分为三类。
1、组合问题：
377. 组合总和 Ⅳ
494. 目标和
518. 零钱兑换 II
2、True、False问题：
139. 单词拆分
416. 分割等和子集
3、最大最小问题：
474. 一和零
322. 零钱兑换


ac wing题目:
https://www.cnblogs.com/YDDDD/category/1410039.html


1.组合问题公式
    dp[i] += dp[i-num]
2.True、False问题公式
    dp[i] = dp[i] or dp[i-num]
3.最大最小问题公式
    dp[i] = min(dp[i], dp[i-num]+1)或者dp[i] = max(dp[i], dp[i-num]+1)
以上三组公式是解决对应问题的核心公式。

当然拿到问题后，需要做到以下几个步骤：
1.分析是否为背包问题。
2.是以上三种背包问题中的哪一种。
3.是0-1背包问题还是完全背包问题。也就是题目给的nums数组中的元素是否可以重复使用。
4.如果是组合问题，是否需要考虑元素之间的顺序。需要考虑顺序有顺序的解法，不需要考虑顺序又有对应的解法。

接下来讲一下背包问题的判定
背包问题具备的特征：给定一个target，target可以是数字也可以是字符串，再给定一个数组nums，nums中装的可能是数字，也可能是字符串，问：能否使用nums中的元素做各种排列组合得到target。

背包问题技巧：
1.如果是0-1背包，即数组中的元素不可重复使用，nums放在外循环，target在内循环，且内循环倒序；
for num in nums:
    for i in range(target, nums-1, -1):


2.如果是完全背包，即数组中的元素可重复使用，nums放在外循环，target在内循环。且内循环正序。
for num in nums:
    for i in range(nums, target+1):
        dp[i] += dp[i - num]


3.如果组合问题需考虑元素之间的顺序，需将target放在外循环，将nums放在内循环。(顺序不同的序列被视作不同的组合)
  很容易发现「重复问题」，因此，我们可以使用「动态规划」来做
  如果题目问具体的解，那么用「回溯搜索」做（「力扣」第 39 题：组合之和)
for i in range(1, target+1):
    for num in nums:
        dp[i] += dp[i-num]
代码

class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        if not nums:
            return 0
        dp = [0] * (target+1)
        dp[0] = 1
        for i in range(1, target+1):
            for num in nums:
                if i >= num:
                    dp[i] += dp[i-num]
        return dp[target]
以上是我对背包问题的总结，希望对你有帮助。要是觉得不错，点个赞吧。

链接：https://leetcode-cn.com/problems/combination-sum-iv/solution/xi-wang-yong-yi-chong-gui-lu-gao-ding-bei-bao-wen-/

如果是0-1背包
    即数组中的元素不可重复使用，nums放在外循环，target在内循环，且内循环倒序；
    因为顺着nums遍历可以做到选和不选，过了num就与下一个num无关了，因此nums在外循环
    内循环倒序是因为倒序更新第c个值时，前面的第c-num的状态是未选择当前num的状态
    从前往后更新不知道前面的状态是否选了num。
    当求0/1背包的组合问题时候，必须使用倒序

如果是完全背包
    数组中的元素可以重复出现，此时nums放在外层循环是为了方便递归
    其实完全背包nums在外循环或内循环均可，nums放在外层可以避免target重复调用
    但target必须正序遍历。
    完全背包的目的一般是求最值

如果是组合背包
    1.数组中的元素可以重复出现，但是考虑顺序(即顺序不同组合不同)
        此时nums放在内循环，target放在外循环，正序遍历，
        因为这样dp的每个状态更新时都不用考虑前面的状态是否选择了第i个num。
    2.数组中的元素可以重复出现，但是不考虑顺序(顺序不同组合相同)
        nums放在外循环，target在内循环。且内循环正序。
    组合背包的问题一般是求组合个数。

恰好装满的最值问题
    1.是否恰好装满的解法不同只在于初始值的不同
    (1)恰好装满：
    求最大值时，除了dp[0] 为0，其他都初始化为无穷小 -0x3f3f3f3f
    求最小值时，除了dp[0] 为0，其他都初始化为无穷大  0x3f3f3f3f
    (2)不必恰好装满： 全初始化为0
    '''
    我们看到的求解最优解的背包问题中，事实上有两种不太相同的问法。 
    1. 要求”背包恰好装满“ 时的最优解 
    2. 不要求背包一定要被装满时的最优解
    我们上面所讨论的就是第2种， 不要求背包一定要被装满时的最优解。
    一种区别这两种问法的实现方法是在初始化的时候有所不不同。
    如果是第一种问法，要求恰好装满背包，那么在初始化时除了 dp[0] 为0, 其他dp[1...W]均设为−∞，这样就可以保证最终得到 dp[v1]是一种恰好装满背包的最优解
    如果并没有要求必须把背包装满，而是只希望价格尽量大，初始化时应该将dp[0...W} 全部设为0。 
    这是为什么呢？可以这样理解：
    初始化的dp 数组事实上就是在没有任何物品可以放入背包时的合法状态。
    如果要求背包恰好装满，那么此时只有容量为0的背包可以在什么也不装的状态下被 “恰好装满” ，此时背包价值为0。
    其他容量的背包均没有合法的解，属于未定义的状态，所以都应该被赋值为 −∞ 。当前的合法解，一定是从之前的合法状态推得的
    如果背包并非必须被装满，那么任何容量的背包都有一个合法解 “什么也不装”，这个解的价值为0,所以初始化时状态的值也就全部为0了。
    '''


1.如果01背包求小于背包容量的个数
注意dp数组需要初始化为1
d = [1 for i in range(w + 1)]
for i in range(n):
    for j in range(w, weights[i] - 1, -1):
        d[j] = d[j] + d[j - weights[i]]
2.如果是01背包求个数 需要倒序遍历！然后在考虑顺序问题


转载于
原文链接：https://blog.csdn.net/wumuzi520/article/details/7021210
具体案列：
1.01背包装满target的方案个数
    例子：
    给定一个数m，将m拆成不同的自然数的和的形式有多少种方案，这就是典型的01背包问题
    背包容量为m，物品件数为k，这里面的k是隐含条件，可以求出来，因为m最多由1+2+…+k得到
    由此可以根据m求得物品件数的上限
    01背包装满的问题抽象化：
       设背包容量为V，一共N件物品，每件物品体积为C[i]，每件物品的价值为W[i]，求将背包装满的方案总数。
       1） 子问题定义：F[i][j]表示前i件物品中选取若干件物品放入剩余空间为j的背包中刚好把背包装满的方案总数。
       2） 根据第i件物品体积和所剩背包容量大小进行决策
       注意初始化条件为F[0][0]=1，即没有物品放入容量为0的背包刚好放满的方案数为1。
空间未优化版本:
'''
	F[0][0] ← 1
  	for i ← 1 to N
      		do for j ← 0 to V
          	     if (j < C[i])
                         then F[i][j] ← F[i-1][j]
          	     else
             		 F[i][j] ← F[i-1][j]+F[i-1][j-C[i]]
  	return F[N][V]
'''
上述代码的空间复杂度为O(NV)，由状态方程可知，F[i][]只与F[i-1][]的状态有关，故可以用一维数组来代替二维数组，以降低空间复杂度为O(V)。
空间优化版本:
'''
	F[0] ← 1
  	for i ← 1 to N
      		do for j ← V to C[i]
          	   if (j >= C[i])
              		then F[j] ← F[j]+F[j-C[i]]
  	return F[V]
'''


1.01背包组合个数问题：（核心思想就是数字智能用一次，这样如果进行空间压缩就需要倒序）
"""
小蒜有n(1≤n≤20) 个正整数，找出其中和为t(t 也是正整数)的可能的组合方式。如：
n=5,5 个数分别为 1,2,3,4,5 t=5；
那么可能的组合有 5=1+4  5=1+4 和 5=2+3 和 5=5三种组合方式。

输入格式
输入的第一行是两个正整数 n 和 t，用空格隔开，其中1≤n≤20, 表示正整数的个数，t为要求的和(1≤t≤1000)

接下来的一行是 n 个正整数，用空格隔开。

输出格式
和为 t 的不同的组合方式的数目。

输出时每行末尾的多余空格，不影响答案正确性

样例输入
5 5
1 2 3 4 5
样例输出
3

相当于求倒序遍历即可
#include<iostream>
#include<algorithm>

using namespace std;

const int N=110,M=10010;

int n,m,a[N],f[M];

int main()
{
    cin>>n>>m;
    for(int i=1;i<=n;i++) cin>>a[i];

    f[0]=1;

    for(int i=1;i<=n;i++)
        for(int j=m;j>=a[i];j--)
            f[j]+=f[j-a[i]];

    cout<<f[m]<<endl;

    return 0;
}



空间未优化版本
#include <iostream>
#include <vector>
using namespace std;
int main()
{
    int n, m;
    cin >> n >> m;
    int size = (m >= n ? m : n) + 1;
    vector<int> arr(size);
    for (int i = 1; i <= n; i++)
        cin >> arr[i];
    vector<vector<long long>> dp;
    dp.resize(size);
    for (int i = 0; i<dp.size(); i++)
        dp[i].resize(size);

    dp[0][0] = 1;
    for (int i = 1; i <= n; i++)
    {
        dp[i][0] = 1;
        for (int j = 0; j <= m; j++)
        {
            if (j < arr[i])
                dp[i][j] = dp[i - 1][j];
            else
                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i]];
        }
    }
    cout << dp[n][m] << endl;
    return 0;
}
"""

