'''
在一个按照东西和南北方向划分成规整街区的城市里，n个居民点散乱地分布在不同的街区中。用x 坐标表示东西向，用y坐标表示南北向。各居民点的位置可以由坐标(x,y)表示。街区中任意2 点(x1,y1)和(x2,y2)之间的距离可以用数值|x1-x2|+|y1-y2|度量。
居民们希望在城市中选择建立邮局的最佳位置，使n个居民点到邮局的距离总和最小。
编程任务：
给定n 个居民点的位置,编程计算n 个居民点到邮局的距离总和的最小值

输入
输入数据的第1 行是居民点数n，1<=n<=10000。接下来n 行是居民点的位置，每行2 个整数x 和y，-10000<=x，y<=10000。
输出
程序运行结束时，将计算结果输出。第1 行中的数是n 个居民点到邮局的距离总和的最小值。
样例输入
5
1 2
2 2
1 3
3 -2
3 3
样例输出
10
'''
# 解题思路：
#
# 因为街区中任意2 点(x 1,y 1)和(x2,y2)之间的距离可以用数值|x1-x2|+|y 1-y2|度量所以我们可以将任意2点的距离可以看作为x坐标上的距离|x1-x2|和y坐标的距离|y 1-y2|之和。这样我们容易想到输油管道问题那个题目(我博客有)，所以我们可以将这个2维的题目拆分为2个一维然后将它们合并就行了。
#
#    一  找出x坐标(此时可忽略y坐标)的最优点 参考输油管道问题 可知最优点是中点，可以用 1.线性时间找中位数，2.先排序在找中位数 (因为输油管道问题是用的线性时间做的所以这个我贴的代码是用的排序)
#
#    二  找出y坐标(此时可忽略x坐标)的最优点  参考输油管道问题 可知最优点是中点，可以用 1.线性时间找中位数，2.先排序在找中位数 (因为输油管道问题是用的线性时间做的所以这个我贴的代码是用的排序)
#
#    三  合并 将x ,y坐标所求的距离和相加即是最有值。

# 算法思想：
#        设邮局的位置为(x,y).那么所有居民点东西向距邮局x的距离和sumX=|x-x1|+|x-x2|+…+|x-xn|。由中位数定理可知,x为所有居民点东西向坐标的中位数。同理可知，y为所有居民点南北向坐标的中位数。所以，问题就转化为求一个无序数组的中位数（高效求解：线性时间选择
# https://blog.csdn.net/Willy__QI/article/details/89083450?utm_medium=distribute.pc_relevant.none-task-blog-title-2&spm=1001.2101.3001.4242
'''
线性时间选择问题：给定线性集中n个元素和一个整数k，求这n个元素的第k小的元素，当k=(n+1)/2时，称为找中位数。

      如果能在线性时间内找到一个划分基准，使得按这个基准划分出的两个子数组的长度都至少为原数组长度的ε倍（0<ε<1），那么在最坏情况下用O(n)时间可以完成选择任务。

      划分基准的选择步骤:

      第一，将n个元素划分成⌈n/5⌉，每组5个元素，最后一组可能少于5个元素。对每组的元素进行排序，并取出每组元素的中位数，共⌈ n/5⌉个。

      第二，递归调用该函数，求⌈ n/5⌉个中位数的中位数，如果⌈ n/5⌉为偶数，求两个中间数较大的一个，以此作为基准进行划分。

      找到基准后，可以以此基准进行一趟快速排序，将数组划分成两个子数组。然后比较左边子数组个数与整数k的大小，确定第k小元素在哪一个子数组中，达到减小问题规模的目的。最后，递归调用该函数，求出第k小元素。
'''

'''
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
int a[10000],b[10000];
int main()
{
    int n,q,p,c1,c2;
    while(cin>>n)
    {
        int sum=0;
        for(int i=0;i<n;i++)
        {
            cin>>q>>p;
            a[i]=p;
            b[i]=q;
        }
        sort(a,a+n);
        sort(b,b+n);
        c1=a[n/2];
        c2=b[n/2];
        for(int i=0;i<n;i++)
       {
           sum+=abs(c1-a[i]);
           sum+=abs(c2-b[i]);
       }
        cout<<sum<<endl;
    }
    return 0;
}
'''

