'''
给你一个整数数组 arr 和一个整数 k ，其中数组长度是偶数，值为 n 。
现在需要把数组恰好分成 n / 2 对，以使每对数字的和都能够被 k 整除。
如果存在这样的分法，请返回 True ；否则，返回 False 。

示例 1：
输入：arr = [1,2,3,4,5,10,6,7,8,9], k = 5
输出：true
解释：划分后的数字对为 (1,9),(2,8),(3,7),(4,6) 以及 (5,10)

示例 2：
输入：arr = [1,2,3,4,5,6], k = 7
输出：true
解释：划分后的数字对为 (1,6),(2,5) 以及 (3,4) 。

示例 3：
输入：arr = [1,2,3,4,5,6], k = 10
输出：false
解释：无法在将数组中的数字分为三对的同时满足每对数字和能够被 10 整除的条件。

示例 4：
输入：arr = [-10,10], k = 2
输出：true

示例 5：
输入：arr = [-1,1,-2,2,-3,3,-4,4], k = 3
输出：true

提示：
arr.length == n
1 <= n <= 10^5
n 为偶数
-10^9 <= arr[i] <= 10^9
1 <= k <= 10^5
'''
# java
# (x + y) // k = 3 ===> (x // k + y // k) = 3 ===>
'''
两个数 x 和 y 的和能被 kk 整除，当且仅当这两个数对 kk 取模的结果 x_kx，k和 y_ky k的和就能被 k 整除。
这里我们规定取模的结果大于等于 0，无论 x 和 y 的正负性。
因此，我们将数组 arr 中的每个数 x 对 k 进行取模，并将得到的余数 x_k，k 进行配对：
'''

'''
class Solution {
    public boolean canArrange(int[] arr, int k) {
        int[] mod = new int[k];
        for(int i : arr){
            // 消除负数
            mod[(i % k + k) % k]++;
        }
        for(int i = 1; i < k; i++){
            if(mod[i] != mod[k - i]) return false;
        }
        return mod[0] % 2 == 0 ? true : false;
    }
}
'''
