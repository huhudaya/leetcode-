'''
给定一个整数 n，返回 n! 结果尾数中零的数量。

示例 1:

输入: 3
输出: 0
解释: 3! = 6, 尾数中没有零。
示例 2:

输入: 5
输出: 1
解释: 5! = 120, 尾数中有 1 个零.
说明: 你算法的时间复杂度应为 O(log n) 。
'''

'''
一个数 n 的阶乘末尾有多少个 0 取决于从 1 到 n 的各个数的因子中 2 和 5 的个数
 而 2 的个数是远远多余 5 的个数的, 因此求出 5 的个数即可. 
 题解中给出的求解因子 5 的个数的方法是用 n 不断除以 5, 直到结果为 0, 然后把中间得到的结果累加.

综上，规律就是每隔 5 个数，出现一个 5，每隔 25 个数，出现 2 个 5，每隔 125 个数，出现 3 个 5... 以此类推
最终 5 的个数就是 n / 5 + n / 25 + n / 125 ...
写程序的话，如果直接按照上边的式子计算，分母可能会造成溢出。
所以算 n / 25 的时候，我们先把 n 更新，n = n / 5，然后再计算 n / 5 即可
后边的同理
'''
class Solution:
    def trailingZeroes(self, n: int) -> int:
        # 注意思考：0是由2*5得来的
        cnt = 0
        while n:
            # 计算5，25，125这样的每个数各含有多少个5即可
            cnt += n // 5
            n //= 5
        return cnt