'''
链接：https://www.nowcoder.com/questionTerminal/51dcb4eef6004f6f8f44d927463ad5e8?answerType=1&f=discussion
小Q得到一个神奇的数列: 1, 12, 123,...12345678910,1234567891011...。
并且小Q对于能否被3整除这个性质很感兴趣。
小Q现在希望你能帮他计算一下从数列的第l个到第r个(包含端点)有多少个数可以被3整除。

输入描述:
输入包括两个整数l和r(1 <= l <= r <= 1e9), 表示要求解的区间两端。

输出描述:
输出一个整数, 表示区间内能被3整除的数字个数。
示例1
输入
2 5
输出
3
说明
12, 123, 1234, 12345...
其中12, 123, 12345能被3整除。
'''
'''
链接：https://www.nowcoder.com/questionTerminal/51dcb4eef6004f6f8f44d927463ad5e8?answerType=1&f=discussion
来源：牛客网

分析： 对于这道题来说，我们肯定不能直接从l到r遍历一遍，然后对于每个数判断是否能够被3整除，这样的复杂度太高，因为数据范围是10^9，所以我们考虑找规律，打表如下：
1%3 =====> 1
12%3 =====> 0
123%3 =====> 0
1234%3 =====> 1
12345%3 =====> 0
123456%3 =====> 0
那么我们发现从1开始，每隔3个数就有两个数%3=0，那么从[1,x]区间有多少能被3整除的数呢？答案显然为 f(x)=2*x/3，那么从[1,r]区间中被3整除的个数就等于f(r)-f(l-1)。
复杂度：
时间复杂度：O(1)
空间复杂度：O(1)
'''

while 1:
    try:
        s = ''
        x = input().split()
        l = int(x[0])
        r = int(x[1])
        n = 0
        for i in range(1, 1000000000):
            s = s + str(i)
            if l <= i <= r:
                if int(s) % 3 == 0:
                    n += 1
            if i == r:
                break
        print(n)
    except:
        break